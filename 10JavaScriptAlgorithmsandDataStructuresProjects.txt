///Palindrome Checker
function palindrome(str) {
  let fistString = str.split(/,|-|\.|_| |:|[\/\\]|[()]/).join("").toLowerCase();
  console.log(fistString);

  let secondString = fistString.split("").reverse().join("");
    console.log(secondString);
  if (fistString === secondString){
    return true
  } else return false
}

palindrome("0_0 (: /-\ :) 0-0")
/*
palindrome("eye") should return a boolean.
Passed:palindrome("eye") should return true.
Passed:palindrome("_eye") should return true.
Passed:palindrome("race car") should return true.
Passed:palindrome("not a palindrome") should return false.
Passed:palindrome("A man, a plan, a canal. Panama") should return true.
Passed:palindrome("never odd or even") should return true.
Passed:palindrome("nope") should return false.
Passed:palindrome("almostomla") should return false.
Passed:palindrome("My age is 0, 0 si ega ym.") should return true.
Passed:palindrome("1 eye for of 1 eye.") should return false.
Passed:palindrome("0_0 (: /-\ :) 0-0") should return true.
Passed:palindrome("five|\_/|four") should return false.
*/




////Roman Numeral Converter
function convertToRoman(num) {
    let string = num.toString().split("").reverse().join("");
    let jString = "";
    let dString = "";
    let sString = "";
    let tString = "";
    switch(string[0]){
       case "1":
         jString += "I";
         break;
       case "2":
         jString += "II";
         break;
        case "3":
         jString += "III";
         break;
       case "4":
         jString += "IV";
         break;
        case "5":
         jString += "V";
         break;
       case "6":
         jString += "VI";
         break;
        case "7":
         jString += "VII";
         break;
       case "8":
         jString += "VIII";
         break;
        case "9":
         jString += "IX";
         break;
       case "0":
         break;
    } 
    switch(string[1]){
       case "1":
         dString += "X";
         break;
       case "2":
         dString += "XX";
         break;
        case "3":
         dString += "XXX";
         break;
       case "4":
         dString += "XL";
         break;
        case "5":
         dString += "L";
         break;
       case "6":
         dString += "LX";
         break;
        case "7":
         dString += "LXX";
         break;
       case "8":
         dString += "LXXX";
         break;
        case "9":
         dString += "XC";
         break;
       case "0":
         break;
    } 
    switch(string[2]){
       case "1":
         sString += "C";
         break;
       case "2":
         sString += "CC";
         break;
        case "3":
         sString += "CCC";
         break;
       case "4":
         sString += "CD";
         break;
        case "5":
         sString += "D";
         break;
       case "6":
         sString += "DC";
         break;
        case "7":
         sString += "DCC";
         break;
       case "8":
         sString += "DCCC";
         break;
        case "9":
         sString += "CM";
         break;
       case "0":
         break;
    }
    switch(string[3]){
       case "1":
         tString += "M";
         break;
       case "2":
         tString += "MM";
         break;
        case "3":
         tString += "MMM";
         break;
       case "0":
         break;
    }
   console.log(tString+sString+dString+jString);
   return tString+sString+dString+jString;
   }
   
   convertToRoman(3812);



   ////Caesars Cipher - decoder
   function rot13(str) {
    let decoded = "";
    for (let i = 0; i<str.length; i++){
      if (!str[i].match(/[a-zA-Z]/)){
        decoded += str[i]
      }
      else{
        let decimal = str[i].charCodeAt(0);
        decimal -=13;
        if (decimal<65){
          decimal+=26;
        }
        decoded+=String.fromCharCode(decimal);
      }
    }
    return decoded;
  }
  
  rot13("SERR CVMMN!");


  ////Telephone Number Validator for USA
function telephoneCheck(str) {
    let firstSplit = str.split(" ").join("");
    let countOpen = 0;
    let countClose = 0;

    for (let i = 0; i < str.length; i++) {
        if (str[i] === "(") {
            countOpen++;
        } else if (str[i] === ")") {
            countClose++;
        }
    }
    if (countOpen !== countClose) {
        return false;
    }

    let regex = /[^0-9\(\)\-]/
    if (regex.test(firstSplit)) {
        return false;
    }
    let secondSplit = firstSplit.split(/[ ()-]+/);
    if (secondSplit[0].length > 4 && (secondSplit[0].length != 10 && secondSplit[0].length != 11)) {
        return false;
    }
    if (secondSplit[0].length == 10 || secondSplit[0].length == 11) {
        console.log(1)
        if (secondSplit[0] > 4000000000 && secondSplit[0] < 20000000000) {
            return true;
        } else return false
    }
    if (secondSplit[0] == 1 || secondSplit[0] == "") {
        if (secondSplit[1].length > 4 && secondSplit[0] > 2000 && secondSplit[0] < 400 && secondSplit[0].length < 3) {
            return false
        }
        if (secondSplit[2].length != 3) {
            return false
        }
        if (secondSplit[3].length != 4) {
            return false
        }
    }
    else {
        if (secondSplit[0].length > 4 && secondSplit[0] > 2000 && secondSplit[0] < 400 && secondSplit[0].length < 3) {
            return false
        }
        if (secondSplit[1].length != 3) {
            return false
        }
        if (secondSplit[2].length != 4) {
            return false
        }
    }
    return true;
}

telephoneCheck("27576227382")



///Cash Register
function checkCashRegister(price, cash, cid) {
  let needToPay = cash - price;
  let money = [
    [0.01, 0], [0.05, 0], [0.1, 0], [0.25, 0], [1, 0], [5, 0], [10, 0], [20, 0], [100, 0]
  ];
  let change2 = money.map(arr => [...arr]);
 
  for (let i = 0; i < cid.length; i++) {
    money[i][1] = Math.ceil(cid[i][1] / money[i][0]);
  }
  let sumOfCash = 0;
  money.forEach(element => {
    sumOfCash += element[1] * element[0];
  });
  let isEnoughMoney = sumOfCash - needToPay >= 0;
  if (!isEnoughMoney) {
    return {status: "INSUFFICIENT_FUNDS", change: []};
  }
  for (let j = money.length - 1; j >= 0; j--) {
    while (needToPay - money[j][0] >= 0 && money[j][1] > 0) {
        needToPay =  Math.ceil((needToPay - money[j][0]) * 1000) / 1000;
        money[j][1]--;
        change2[j][1]++;
    }
  }
  if (needToPay-0.01 > 0) {
    return {status: "INSUFFICIENT_FUNDS", change: []};
  }
  let cid2 = [];
  for (let i = cid.length - 1; i >= 0; i--) {
    if (change2[i][1] > 0) {
        cid2.push([cid[i][0], change2[i][1] * money[i][0]]);
    }
  }
  let sumOfCash2 = 0;
  money.forEach(element => {
    sumOfCash2 += element[1] * element[0];
  });
  if (sumOfCash2-0.01 <= 0) {
    return {status: "CLOSED", change: cid};
  } else {
    return {status: "OPEN", change: cid2};
  }
}

checkCashRegister(19.5, 20, [["PENNY", 0.5], ["NICKEL", 0], ["DIME", 0], ["QUARTER", 0], ["ONE", 0], ["FIVE", 0], ["TEN", 0], ["TWENTY", 0], ["ONE HUNDRED", 0]])
/*
checkCashRegister(19.5, 20, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]) should return an object.
Passed:checkCashRegister(19.5, 20, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]) should return {status: "OPEN", change: [["QUARTER", 0.5]]}.
Passed:checkCashRegister(3.26, 100, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]) should return {status: "OPEN", change: [["TWENTY", 60], ["TEN", 20], ["FIVE", 15], ["ONE", 1], ["QUARTER", 0.5], ["DIME", 0.2], ["PENNY", 0.04]]}.
Passed:checkCashRegister(19.5, 20, [["PENNY", 0.01], ["NICKEL", 0], ["DIME", 0], ["QUARTER", 0], ["ONE", 0], ["FIVE", 0], ["TEN", 0], ["TWENTY", 0], ["ONE HUNDRED", 0]]) should return {status: "INSUFFICIENT_FUNDS", change: []}.
Passed:checkCashRegister(19.5, 20, [["PENNY", 0.01], ["NICKEL", 0], ["DIME", 0], ["QUARTER", 0], ["ONE", 1], ["FIVE", 0], ["TEN", 0], ["TWENTY", 0], ["ONE HUNDRED", 0]]) should return {status: "INSUFFICIENT_FUNDS", change: []}.
Passed:checkCashRegister(19.5, 20, [["PENNY", 0.5], ["NICKEL", 0], ["DIME", 0], ["QUARTER", 0], ["ONE", 0], ["FIVE", 0], ["TEN", 0], ["TWENTY", 0], ["ONE HUNDRED", 0]]) should return {status: "CLOSED", change: [["PENNY", 0.5], ["NICKEL", 0], ["DIME", 0], ["QUARTER", 0], ["ONE", 0], ["FIVE", 0], ["TEN", 0], ["TWENTY", 0], ["ONE HUNDRED", 0]]}.
*/
/*
Currency Unit	Amount
Penny	$0.01 (PENNY)
Nickel	$0.05 (NICKEL)
Dime	$0.1 (DIME)
Quarter	$0.25 (QUARTER)
Dollar	$1 (ONE)
Five Dollars	$5 (FIVE)
Ten Dollars	$10 (TEN)
Twenty Dollars	$20 (TWENTY)
One-hundred Dollars	$100 (ONE HUNDRED)
*/