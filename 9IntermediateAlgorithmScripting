///sum of arr[min,max]
function sumAll(arr) {
  let sum=0;
  let min=arr[0];
  let max=arr[1];
  if(min<max){
    for(let i=min; i<max+1; i++){
    sum+=i;
    }
  }
  else{
    for(let i=max; i<min+1; i++){
    sum+=i;
    }
  }
  return sum;
}

sumAll([4, 1])

//or
function sumAll(arr) {
    let max = Math.max(arr[0], arr[1]);
    let min = Math.min(arr[0], arr[1]);
    let sumBetween = 0;
    for (let i = min; i <= max; i++) {
      sumBetween += i;
    }
    return sumBetween;
  }
  sumAll([1, 4]);


///Diff Two Arrays
function diffArray(arr1, arr2) {
  let newArr = [];
  let sumArr = [...arr1, ...arr2];
  for(let i=0; i<sumArr.length; i++){
    if (arr1.indexOf(sumArr[i])==-1 || arr2.indexOf(sumArr[i])==-1 ){
      newArr.push(sumArr[i]);
    }
  }
  return newArr;
}

diffArray(["andesite", "grass", "dirt", "pink wool", "dead shrub"], ["diorite", "andesite", "grass", "dirt", "dead shrub"]);



////Seek and Destroy
function destroyer(arr, ...valsToRemove) {
  return arr.filter(elem => !valsToRemove.includes(elem));
}

destroyer([1, 2, 3, 1, 2, 3], 2, 3);



/////Wherefore art thou - return items where keys + values in first object == in second object
function whatIsInAName(collection, source) {
  return collection.filter(item => {
    for (let key in source) {
      if (item[key] !== source[key]) {
        return false;
      }
    }
    return true;
  });
}

whatIsInAName([{ "apple": 1, "bat": 2 }, { "bat": 2 }, { "apple": 1, "bat": 2, "cookie": 2 }], { "apple": 1, "bat": 2 })



////Spinal Tap Case - return part of url with - and splited words
function spinalCase(str) {
  let newStr = str.replace(/([A-Z])/g, ' $1').trim().split(/,|-|\.|_| /).filter(item => item!=="").join("-").toLowerCase();
  return newStr;
}

spinalCase('This Is Spinal Tap');
//spinalCase("Teletubbies say Eh-oh") should return the string teletubbies-say-eh-oh.


///Pig Latin
function translatePigLatin(str) {
  let newStr = "";
  let add = "";
  if (str[0]==="a" || str[0]==="A" || str[0]==="e" || str[0]==="E" || str[0]==="i" || str[0]==="I" || str[0]==="o" || str[0]==="O" || str[0]==="u" || str[0]==="U"){
    newStr += str;
    newStr +="way";
  }
  else{
    for (let i = 0; i<str.length; i++){
      if (str[i]==="a" || str[i]==="A" || str[i]==="e" || str[i]==="E" || str[i]==="i" || str[i]==="I" || str[i]==="o" || str[i]==="O" || str[i]==="u" || str[i]==="U"){
        newStr = str.slice(i);
        break;
      }
    else{
      add+=str[i];
    }
    }
    newStr+=add+"ay";
  }
  console.log(newStr)
  return newStr;
}

translatePigLatin("california"); //aliforniacay

//translatePigLatin("glove"); // oveglay
//translatePigLatin("algorithm") should return the string algorithmway.

// or 
function translatePigLatin(str) {
  let consonantRegex = /^[^aeiou]+/;
  let myConsonants = str.match(consonantRegex);
  return myConsonants !== null
    ? str
        .replace(consonantRegex, "")
        .concat(myConsonants)
        .concat("ay")
    : str.concat("way");
}

translatePigLatin("consonant");


////Search and Replace
function myReplace(str, before, after) {
  let split = str.split(/ /);
  let index = split.indexOf(before);
  let char1 = split[index][0].toUpperCase();
  let char2 = "";
  if(split[index][0] === char1){
    char2 += after[0].toUpperCase() +  after.slice(1);
  }
  else {
    char2 += after[0].toLowerCase() +  after.slice(1);
  }
  split[index] = char2;
  console.log(split.join(" "))
  return split.join(" ");
}

myReplace("I think we should look up there", "up", "Down");